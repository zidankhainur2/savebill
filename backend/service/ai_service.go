package service

import (
	"a21hc3NpZ25tZW50/model"
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
)

type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

type AIService struct {
	Client HTTPClient
}

func (s *AIService) AnalyzeData(table map[string][]string, query, token string) (string, error) {
	if len(table) == 0 {
		return "", errors.New("data table is empty")
	}

	requestBody, err := json.Marshal(model.AIRequest{
		Inputs: model.Inputs{
			Table: table,
			Query: query,
		},
	})
	if err != nil {
		return "", err
	}

	req, err := http.NewRequest("POST", "https://api-inference.huggingface.co/models/google/tapas-base-finetuned-wtq", bytes.NewBuffer(requestBody))
	if err != nil {
		return "", err
	}
	req.Header.Set("Authorization", "Bearer "+token)
	req.Header.Set("Content-Type", "application/json")

	resp, err := s.Client.Do(req)
	if err != nil {
		return "", err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return "", errors.New("failed to get a valid response from AI model")
	}

	var response model.TapasResponse
	if err := json.NewDecoder(resp.Body).Decode(&response); err != nil {
		return "", err
	}

	if len(response.Cells) > 0 {
		return response.Cells[0], nil
	}
	return "", errors.New("no valid answer found in response")
}

func (s *AIService) ChatWithAI(context, query, token string) (model.ChatResponse, error) {
	requestBody, err := json.Marshal(map[string]string{
		"context": context,
		"query":   query,
	})
	if err != nil {
		return model.ChatResponse{}, err
	}

	req, err := http.NewRequest("POST", "https://api-inference.huggingface.co/models/microsoft/Phi-3.5-mini-instruct", bytes.NewBuffer(requestBody))
	if err != nil {
		return model.ChatResponse{}, err
	}
	req.Header.Set("Authorization", "Bearer "+token)
	req.Header.Set("Content-Type", "application/json")

	resp, err := s.Client.Do(req)
	if err != nil {
		return model.ChatResponse{}, err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		return model.ChatResponse{}, errors.New("failed to get a valid response from AI model")
	}

	var chatResponse []model.ChatResponse
	if err := json.NewDecoder(resp.Body).Decode(&chatResponse); err != nil {
		return model.ChatResponse{}, err
	}

	if len(chatResponse) > 0 {
		return chatResponse[0], nil
	}
	return model.ChatResponse{}, errors.New("no response generated by AI model")
}
